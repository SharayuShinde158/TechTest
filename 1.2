Looking at the above defined classes we can notice that there are a lot in common between them, is such a redundancy a bad or good  practice? why? 
Solution :-
Redundancy is a bad pratice and should be avoided to have a clean code base.
Redundant code causes following disadvantages:-
Fragile code – 
The developer might not be aware of all the possible copies of the code, may be because he is new to the system, and hence might miss fixing the code at few places and this can lead to a broken functionality. So any change to be made has to be done very carefully.
Difficult to maintain and extend – with no option of resue, copy-paste of code will become a rage. There would be no element of reuse. And it would also add to the number of lines of code.
Hard to debug/read – especially in case of redundancy of algorithms/logic. The person reading the code would have no idea why the same algorithm is written in 2 different ways at 2 different places. It creates a grey area in the code.
